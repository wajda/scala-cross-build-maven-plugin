<!--

    Copyright (C) 2015 Stratio (http://stratio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.stratio.mojo</groupId>
  <!-- Use default Scala binary version hardcorded in the artifactId -->
  <artifactId>full-example_2.10</artifactId>
  <version>1</version>

  <properties>
    <!-- These properties are mandatory. -->
    <scala.binary.version>2.10</scala.binary.version>
    <scala.version>2.10.6</scala.version>
    <!-- These are defined just as convenience. -->
    <scala_2.10.version>2.10.6</scala_2.10.version>
    <scala_2.11.version>2.11.7</scala_2.11.version>
    <default.scala.binary.version>2.10</default.scala.binary.version>
    <default.scala.version>${scala_2.10.version}</default.scala.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.binary.version}</artifactId>
      <version>2.2.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!--
      Use a separate target directory for each Scala binary version.
      These allows us to interleave goals for both version without interference,
      such as:
      $ mvn scala-cross-build:change-version -Pscala-2.10
      $ mvn compile
      $ mvn scala-cross-build:change-version -Pscala-2.11
      $ mvn compile
      $ mvn scala-cross-build:change-version -Pscala-2.10
      $ mvn package
      $ mvn scala-cross-build:change-version -Pscala-2.11
      $ mvn package
    -->
    <directory>${project.basedir}/target/${scala.binary.version}</directory>
    <outputDirectory>${project.build.directory}/classes</outputDirectory>
    <testOutputDirectory>${project.build.directory}/test-classes</testOutputDirectory>

    <plugins>

      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>3.2.1</version>
        <configuration>
          <checkMultipleScalaVersions>false</checkMultipleScalaVersions>
          <recompileMode>incremental</recompileMode>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>add-source</goal>
              <goal>compile</goal>
              <goal>testCompile</goal>
              <goal>doc</goal>
              <goal>doc-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.github.wajda</groupId>
        <artifactId>scala-cross-build-maven-plugin</artifactId>
        <version>@test.version@</version>
        <configuration>
          <defaultScalaBinaryVersion>${default.scala.binary.version}</defaultScalaBinaryVersion>
          <defaultScalaVersion>${default.scala.version}</defaultScalaVersion>
          <generatePomBackupFiles>false</generatePomBackupFiles>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
          <includes>
            <include>**/*Suite.*</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!--
      Define one Scala profile per version.
      The easiest way to use the plugin is by using these profiles
      defining scala.version and scala.binary.version properties.

      These profiles might define further configuration for
      version-dependant build customizations.
    -->
    <profile>
      <id>scala-2.10</id>
      <properties>
        <scala.binary.version>2.10</scala.binary.version>
        <scala.version>${scala_2.10.version}</scala.version>
      </properties>
    </profile>
    <profile>
      <id>scala-2.11</id>
      <properties>
        <scala.binary.version>2.11</scala.binary.version>
        <scala.version>${scala_2.11.version}</scala.version>
      </properties>
    </profile>
  </profiles>
</project>
